# https://raw.githubusercontent.com/quic/aimet/develop/Jenkins/Dockerfile.torch-gpu
# =============================================================================
#  @@-COPYRIGHT-START-@@
#
#  Copyright (c) 2021-2023, Qualcomm Innovation Center, Inc. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#  1. Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#
#  2. Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#
#  3. Neither the name of the copyright holder nor the names of its contributors
#     may be used to endorse or promote products derived from this software
#     without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#
#  SPDX-License-Identifier: BSD-3-Clause
#
#  @@-COPYRIGHT-END-@@
# =============================================================================

# Docker image file to build and test AIMET for Tensorflow in a GPU environment

ARG REGISTRY
FROM ${REGISTRY}nvidia/cuda:12.1.1-cudnn8-devel-ubuntu22.04

ARG DEBIAN_FRONTEND=noninteractive
ARG APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn

# Please see here for more information on these steps:
# https://forums.developer.nvidia.com/t/gpg-error-http-developer-download-nvidia-com-compute-cuda-repos-ubuntu2004-x86-64/212904
## The additional steps are to fix this error and eliminate/reduce some warnings:
## Failed to fetch https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/Packages.gz Hash Sum mismatch
RUN mv /etc/apt/sources.list.d/cuda-ubuntu2204-x86_64.list /etc/apt/sources.list.d/cuda.list.orig && \
    apt-get update > /dev/null && \
    apt-get install -y --no-install-recommends apt-utils && \
    apt-key adv --no-tty --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/3bf863cc.pub && \
    apt-get update > /dev/null && \
    rm -rf /var/lib/apt/lists/*

RUN apt-get update > /dev/null && \
    apt-get install --no-install-recommends -y \
        # Bare minimum Packages
        ca-certificates \
        git \
        ssh \
        sudo \
        wget \
        xterm \
        xauth > /dev/null && \
        rm -rf /var/lib/apt/lists/*

# Install certificates
RUN sudo update-ca-certificates

# Modified version of bash.bashrc that adjusts the prompt
### COPY bash.bashrc /etc/
### RUN chmod 644 /etc/bash.bashrc

### COPY profile.global /usr/local/etc/
### RUN chmod 555 /usr/local/etc/profile.global

# Add sudo support
RUN echo "%users ALL = (ALL) NOPASSWD: ALL" >> /etc/sudoers

RUN apt-get update -y > /dev/null && \
    apt-get install --no-install-recommends -y \
        # Python
        python3.10 \
        python3.10-dev \
        python3.10-venv \
        python3-pip \
        python3-setuptools \
        build-essential \
        # lmdb dependency
        libffi-dev && \
        rm -rf /var/lib/apt/lists/*

# Register the version in alternatives
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1
# Set python 3.10 as the default python
RUN update-alternatives --set python3 /usr/bin/python3.10

# Upgrade Python3 pip and install some more packages
RUN python3 -m pip --no-cache-dir install --upgrade \
        pip \
        setuptools==49.4.0 \
        wheel

# Ubuntu packages for pytorch aimet
RUN dpkg --add-architecture i386
RUN apt-get update > /dev/null && \
    apt-get install --no-install-recommends -y \
        build-essential \
        emacs \
        environment-modules \
        less \
        libavcodec-dev \
        libavformat-dev \
        libeigen3-dev \
        libgtest-dev \
        libgtk2.0-dev \
        libsox-dev \
        libsox-fmt-all \
        libstdc++6:i386 \
        libswscale-dev \
        libxtst6 \
        lsb-release \
        meld \
        nano \
        pandoc \
        pkg-config \
        python3-tk \
        sox \
        tree \
        vim && \
        rm -rf /var/lib/apt/lists/*

# Python3 Packages
RUN python3 -m pip --no-cache-dir install \
        astroid \
        attrs \
        behave \
        blosc \
        cffi \
        click \
        cma \
        cumm-cu120 \
        cvxpy \
        cylp \
        cython \
        dataclasses \
        datasets \
        Deprecated \
        deepspeed \
        docutils \
        graphviz \
        grpcio \
        grpcio-tools \
        h5py \
        ipykernel \
        ipython \
        Jinja2 \
        jupyter \
        keras \
        lmdb \
        matplotlib \
        mock \
        nbsphinx \
        networkx \
        numpy \
        onnx==1.16.0 \
        onnxsim \
        onnxruntime==1.17.1 \
        onnxruntime-extensions \
        opencv-python \
        peft \
        Pillow \
        pluggy \
        progressbar2 \
        protobuf \
        psutil \
        ptflops \
        pybind11 \
        pydot \
        pyDOE2 \
        pylint \
        pymoo \
        pytest \
        pytest-cov \
        pytorch-ignite \
        PyYAML \
        scikit-learn \
        scipy \
        spconv-cu117 \
        sphinx \
        sphinx-autodoc-typehints \
        sphinx-jinja \
        sphinx-rtd-theme \
        tensorboard \
        tensorboardX \
        timm \
        torch -f https://download.pytorch.org/whl/nightly/cu121 \
        torchaudio -f https://download.pytorch.org/whl/nightly/cu121 \
        torchtext -f https://download.pytorch.org/whl/nightly/cu121 \
        torchvision -f https://download.pytorch.org/whl/nightly/cu121 \
        tqdm \
        transformers \
        wget && \
    python3 -m ipykernel.kernelspec

# Install cmake
RUN mkdir -p /opt/cmake  &&  \
    wget -P /tmp https://github.com/Kitware/CMake/releases/download/v3.19.3/cmake-3.19.3-Linux-x86_64.sh && \
    sh /tmp/cmake-3.19.3-Linux-x86_64.sh --prefix=/opt/cmake --skip-license && \
    rm -f /tmp/cmake-3.19.3-Linux-x86_64.sh && \
    ln -fs /opt/cmake/bin/cmake /usr/local/bin/cmake && \
    ln -fs /opt/cmake/bin/ctest /usr/local/bin/ctest && \
    ln -fs /opt/cmake/bin/cpack /usr/local/bin/cpack

# Onnxruntime C/C++ package needed to create custom C++ onnx ops for quantsim
RUN mkdir /opt/onnxruntime && \
    export ONNXRUNTIME_VER=$(python3 -c 'import onnxruntime; print(onnxruntime.__version__)') && \
    wget -qO- "https://github.com/microsoft/onnxruntime/releases/download/v${ONNXRUNTIME_VER}/onnxruntime-linux-x64-${ONNXRUNTIME_VER}.tgz" | tar xvz --strip-components 1 -C /opt/onnxruntime && \
    ln -s /opt/onnxruntime /usr/local/bin/onnxruntime_headers

ENV PATH=/usr/local/bin:$PATH

# Opencv
RUN wget -q https://github.com/opencv/opencv/archive/refs/tags/4.9.0.tar.gz -O /tmp/4.9.0.tar.gz > /dev/null && \
    tar -C /tmp -xvf /tmp/4.9.0.tar.gz > /dev/null && \
    cd /tmp/opencv-4.9.0 && mkdir release && cd release && \
    cmake -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=release -DWITH_FFMPEG=OFF -DBUILD_TESTS=OFF -DWITH_CUDA=OFF -DBUILD_PERF_TESTS=OFF -DWITH_IPP=OFF -DENABLE_PRECOMPILED_HEADERS=OFF -DWITH_ITT=OFF .. > /dev/null && \
    make -j16 > /dev/null && \
    make -j16 install > /dev/null && \
    rm -rf /tmp/opencv-4.9.0*

EXPOSE 25000
RUN apt-get update && apt-get install -y openssh-server && rm -rf /var/lib/apt/lists/*
RUN mkdir /var/run/sshd

RUN apt-get update && apt-get install -y liblapacke liblapacke-dev && rm -rf /var/lib/apt/lists/*

RUN apt-get update && apt-get install -y libjpeg8-dev && \
    rm -rf /var/lib/apt/lists/*

# Set up symlink to point to the correct python version
RUN ln -sf /usr/bin/python3.10 /usr/bin/python
RUN ln -s /usr/lib/x86_64-linux-gnu/libjpeg.so /usr/lib

RUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config && \
    sed -i 's/Port 22/Port 25000/' /etc/ssh/sshd_config

# SSH login fix. Otherwise user is kicked off after login
RUN sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd

RUN python3 -m pip install git-pylint-commit-hook osqp

# NOTE: We need to pin the holoviews version to this since the latest version has a circular dependency on bokeh 2.0.0 through the panel package
RUN python3 -m pip install holoviews==1.18.3 netron jsonschema pandas==1.5.3

# Note: bokeh requires Pillow while we need to use Pillow-SIMD for performance reasons.
RUN python3 -m pip install bokeh==3.2.2 hvplot==0.9.2

# Remove onnxruntime install and replace with onnxruntime-gpu
RUN export ONNXRUNTIME_VER=$(python3 -c 'import onnxruntime; print(onnxruntime.__version__)') && \
    python3 -m pip uninstall -y onnxruntime && \
    python3 -m pip --no-cache-dir install onnxruntime-gpu==$ONNXRUNTIME_VER

# Remove existing Pillow & Pillow-SIMD and replace with correct version of Pillow-SIMD.
RUN python3 -m pip uninstall -y Pillow Pillow-SIMD
RUN python3 -m pip --no-cache-dir install Pillow-SIMD==9.0.0.post1

RUN apt-get update && apt-get install -y gnupg2
RUN wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key|sudo apt-key add - && echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-14 main" >> /etc/apt/sources.list
RUN apt-get update --fix-missing -y && apt upgrade -y && apt-get install -y clang-11 clang-format clang-tidy-11 && \
   rm -rf /var/lib/apt/lists/*

# Create a version-less symbolic link for clang-tidy
RUN ln -s /usr/bin/run-clang-tidy-11.py /usr/bin/run-clang-tidy.py

# Provide write permission to the python package folder in order to install AIMET in editable mode
RUN chmod o+w /usr/local/lib/python3.10/dist-packages

# Install cutlass 3.3.0
RUN cd /usr/local && \
    git clone --depth 1 --branch v3.3.0 https://github.com/NVIDIA/cutlass.git && \
    mv cutlass cutlass-3.3.0 && \
    chown -R root:users cutlass-3.3.0 && \
    ln -s cutlass-3.3.0 cutlass

# Adjust for your gpu
ENV CMAKE_CUDA_ARCHITECTURES=80
ENV CUDA_ARCHITECTURES=80
ENV TORCH_CUDA_ARCH_LIST="8.0"
# actually installing aimet, is not in the official docker and aimet wants that you install it manually in the docker
COPY . aimet
RUN cd aimet && mkdir -p ./ThirdParty/googletest && cd ./ThirdParty/googletest && git clone https://github.com/google/googletest.git -b v1.14.x v1.14.x
RUN cd /aimet && /bin/bash -c "source packaging/envsetup.sh" && mkdir build && cd build && cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DENABLE_CUDA=ON -DENABLE_TORCH=ON -DENABLE_TENSORFLOW=OFF && make -j16 && make install
ENV PYTHONPATH=/aimet/build/staging/universal/lib/x86_64-linux-gnu:/aimet/build/staging/universal/lib/python:$PYTHONPATH
ENV export LD_LIBRARY_PATH=/aimet/build/staging/universal/lib/x86_64-linux-gnu:/aimet/build/staging/universal/lib/python:$LD_LIBRARY_PATH
ENV export AIMET_VARIANT="torch-gpu"
